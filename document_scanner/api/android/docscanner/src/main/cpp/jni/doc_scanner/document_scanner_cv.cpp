/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-14:03.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "document_scanner/api/android/docscanner/src/main/cpp/jni/c_helpers.h"
#include "document_scanner/api/android/docscanner/src/main/cpp/jni/cppbind_wrapper_helper.hpp"
#include "document_scanner/document_scanner_lib/document_scanner_cv.cpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CV_MAT;
extern const char* CPPBIND_CV_POINTINT;

const char* CPPBIND_DOCCORNERPOINTSEXTRACTOR = "DocCornerPointsExtractor";
const char* CPPBIND_DOCEXTRACTOR = "DocExtractor";



extern "C" JNIEXPORT void Java_doc_1scanner_DocCornerPointsExtractor_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_doc_1scanner_DocCornerPointsExtractor_jGetcxxid(JNIEnv* env, jobject obj, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocCornerPointsExtractor_jConstructor(JNIEnv* env, jobject obj){
    try {
        DocCornerPointsExtractor* ptr = new DocCornerPointsExtractor();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_DOCCORNERPOINTSEXTRACTOR), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocCornerPointsExtractor_jConstructor_11(JNIEnv* env, jobject obj, jobjectid image, ...){
    
    auto cppbind_obj_image = reinterpret_cast<CppBindCObject*>(image);
    auto cppbind_obj_image_ptr = cppbind_obj_image ? cppbind_obj_image->ptr : nullptr;
    auto& jnitocxximage = *static_cast<cv::Mat*>(cppbind_obj_image_ptr);
    try {
        DocCornerPointsExtractor* ptr = new DocCornerPointsExtractor(jnitocxximage);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_DOCCORNERPOINTSEXTRACTOR), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocCornerPointsExtractor_jImage(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->image();
        cv::Mat* cxxtojniresult_ptr = const_cast<cv::Mat*>(new cv::Mat(result));
        char* type_result = strdup(CPPBIND_CV_MAT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_doc_1scanner_DocCornerPointsExtractor_jSetimage(JNIEnv* env, jobject obj, jobjectid id, jobjectid image, ...){
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr);
    
    auto cppbind_obj_image = reinterpret_cast<CppBindCObject*>(image);
    auto cppbind_obj_image_ptr = cppbind_obj_image ? cppbind_obj_image->ptr : nullptr;
    auto& jnitocxximage = *static_cast<cv::Mat*>(cppbind_obj_image_ptr);
    try {
       jnitocxxid->setImage(jnitocxximage);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}



extern "C" JNIEXPORT void Java_doc_1scanner_DocCornerPointsExtractor_jComputecornerpoints(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->computeCornerPoints();
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}

extern "C" JNIEXPORT jobjectidArray Java_doc_1scanner_DocCornerPointsExtractor_jPoints(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocCornerPointsExtractor*>(cppbind_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->points();
        
        jobjectidArray cxxtojniresult = env->NewLongArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            cv::Point* cxxtojnivalue_result_ptr = const_cast<cv::Point*>(new cv::Point(value_result));
            char* type_value_result = strdup(CPPBIND_CV_POINTINT);
            CppBindCObject* cppbind_obj_cxxtojnivalue_result = new CppBindCObject {type_value_result, cxxtojnivalue_result_ptr};
            jobjectid cxxtojnivalue_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnivalue_result);
            env->SetLongArrayRegion(cxxtojniresult, index_result, 1, &cxxtojnivalue_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectidArray result {};
    return result;
}

extern "C" JNIEXPORT void Java_doc_1scanner_DocExtractor_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<DocExtractor*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_doc_1scanner_DocExtractor_jGetcxxid(JNIEnv* env, jobject obj, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<DocExtractor*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocExtractor_jConstructor(JNIEnv* env, jobject obj, jobjectid image, jobjectidArray doc_corner_points, jfloat w, jfloat h, jint margin, ...){
    
    auto cppbind_obj_image = reinterpret_cast<CppBindCObject*>(image);
    auto cppbind_obj_image_ptr = cppbind_obj_image ? cppbind_obj_image->ptr : nullptr;
    auto& jnitocxximage = *static_cast<cv::Mat*>(cppbind_obj_image_ptr);
    
    std::vector<cv::Point> jnitocxxdoc_corner_points;
    auto _jnitocxxdoc_corner_points = cppbind::getLongArray(env, doc_corner_points);
    for (auto& value__jnitocxxdoc_corner_points : _jnitocxxdoc_corner_points) {
        
        auto cppbind_obj_value__jnitocxxdoc_corner_points = reinterpret_cast<CppBindCObject*>(value__jnitocxxdoc_corner_points);
        auto cppbind_obj_value__jnitocxxdoc_corner_points_ptr = cppbind_obj_value__jnitocxxdoc_corner_points ? cppbind_obj_value__jnitocxxdoc_corner_points->ptr : nullptr;
        auto& jnitocxxvalue__jnitocxxdoc_corner_points = *static_cast<cv::Point*>(cppbind_obj_value__jnitocxxdoc_corner_points_ptr);
        jnitocxxdoc_corner_points.emplace_back(jnitocxxvalue__jnitocxxdoc_corner_points);
    }
    
    
    
    try {
        DocExtractor* ptr = new DocExtractor(jnitocxximage, jnitocxxdoc_corner_points, w, h, margin);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_DOCEXTRACTOR), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocExtractor_jImage(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocExtractor*>(cppbind_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->image();
        cv::Mat* cxxtojniresult_ptr = const_cast<cv::Mat*>(new cv::Mat(result));
        char* type_result = strdup(CPPBIND_CV_MAT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_doc_1scanner_DocExtractor_jSetimage(JNIEnv* env, jobject obj, jobjectid id, jobjectid image, ...){
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocExtractor*>(cppbind_obj_id_ptr);
    
    auto cppbind_obj_image = reinterpret_cast<CppBindCObject*>(image);
    auto cppbind_obj_image_ptr = cppbind_obj_image ? cppbind_obj_image->ptr : nullptr;
    auto& jnitocxximage = *static_cast<cv::Mat*>(cppbind_obj_image_ptr);
    try {
       jnitocxxid->setImage(jnitocxximage);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}



extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocExtractor_jWarp(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocExtractor*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->warp();
        cv::Mat* cxxtojniresult_ptr = const_cast<cv::Mat*>(new cv::Mat(result));
        char* type_result = strdup(CPPBIND_CV_MAT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_doc_1scanner_DocExtractor_jDrawpoints(JNIEnv* env, jobject obj, jobjectid id, jint r, jint g, jint b, ...){
    






    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<DocExtractor*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->drawPoints(r, g, b);
        cv::Mat* cxxtojniresult_ptr = const_cast<cv::Mat*>(new cv::Mat(result));
        char* type_result = strdup(CPPBIND_CV_MAT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jboolean Java_doc_1scanner_Document_1scanner_1cvKt_jSaveimage(JNIEnv* env, jclass cls, jstring filename, jobjectid img, ...){
    
    jstring jjnitocxxfilenameStr = static_cast<jstring>(filename);
    auto jnitocxxfilename_cstr = env->GetStringUTFChars(jjnitocxxfilenameStr, 0);
    std::string jnitocxxfilename = jnitocxxfilename_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfilenameStr, jnitocxxfilename_cstr);

    auto cppbind_obj_img = reinterpret_cast<CppBindCObject*>(img);
    auto cppbind_obj_img_ptr = cppbind_obj_img ? cppbind_obj_img->ptr : nullptr;
    auto& jnitocxximg = *static_cast<cv::Mat*>(cppbind_obj_img_ptr);
    
    try {
        const auto& result = ::saveImage(jnitocxxfilename, jnitocxximg);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_doc_1scanner_Document_1scanner_1cvKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
