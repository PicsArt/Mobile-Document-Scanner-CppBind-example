/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/08/2022-16:07.
 * Please do not change it manually.
 */

package doc_scanner

import cppbind.alias.*
import cppbind.exceptionUtils.*
import cppbind.exception_helpers.*
import cv.Mat
import cv.PointInt

open class DocCornerPointsExtractor
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        protected fun construct_helper(image: Mat): Long {
            val kotlintojdkimage = image.cppbindObjId
            val id = jConstructor_1(kotlintojdkimage, image)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(image: Long, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "DocCornerPointsExtractor"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }

    constructor(image: Mat): this(CppBindObject(construct_helper(image), true)) {
    }
    
    var image: Mat
        get() {
            val result = jImage(cppbindObjId)
            val jdktokotlinresult = Mat(CppBindObject(result, true))
            return jdktokotlinresult
        }
        set(value) {
            val kotlintojdkvalue = value.cppbindObjId
            jSetimage(cppbindObjId, kotlintojdkvalue, value)
        }

    val points: List<PointInt>
        get() {
            val result = jPoints(cppbindObjId)
            val jdktokotlinresult: MutableList<PointInt> = mutableListOf()
            for (value_result in result) {
                val jdktokotlinvalue_result = PointInt(CppBindObject(value_result, true))
                jdktokotlinresult.add(jdktokotlinvalue_result)
            }
            return jdktokotlinresult
        }
    
    fun computeCornerPoints(): Unit {
        val result = jComputecornerpoints(cppbindObjId)
        
        return result
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as DocCornerPointsExtractor
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jImage(id: Long): Long
    private external fun jSetimage(id: Long, value: Long, valueObj: Any?): Unit
    private external fun jComputecornerpoints(id: Long): Unit
    private external fun jPoints(id: Long): LongArray
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class DocExtractor
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        
        protected fun construct_helper(image: Mat, docCornerPoints: List<PointInt>, w: Float, h: Float, margin: Int): Long {
            val kotlintojdkimage = image.cppbindObjId
            val kotlintojdkdocCornerPoints = LongArray(docCornerPoints.size) 
            var index_docCornerPoints = 0
            for (value_docCornerPoints in docCornerPoints) {
                val kotlintojdkvalue_docCornerPoints = value_docCornerPoints.cppbindObjId
                kotlintojdkdocCornerPoints[index_docCornerPoints] = kotlintojdkvalue_docCornerPoints
                ++index_docCornerPoints
            }
            val id = jConstructor(kotlintojdkimage, kotlintojdkdocCornerPoints, w, h, margin, image, docCornerPoints)
            return id
        }

        @JvmStatic
        private external fun jConstructor(image: Long, docCornerPoints: LongArray, w: Float, h: Float, margin: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "DocExtractor"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(image: Mat, docCornerPoints: List<PointInt>, w: Float = 420F, h: Float = 596F, margin: Int = 5): this(CppBindObject(construct_helper(image, docCornerPoints, w, h, margin), true)) {
    }
    
    var image: Mat
        get() {
            val result = jImage(cppbindObjId)
            val jdktokotlinresult = Mat(CppBindObject(result, true))
            return jdktokotlinresult
        }
        set(value) {
            val kotlintojdkvalue = value.cppbindObjId
            jSetimage(cppbindObjId, kotlintojdkvalue, value)
        }
    
    fun warp(): Mat {
        val result = jWarp(cppbindObjId)
        val jdktokotlinresult = Mat(CppBindObject(result, true))
        return jdktokotlinresult
    }

    fun drawPoints(R: Int, G: Int, B: Int): Mat {
        val result = jDrawpoints(cppbindObjId, R, G, B)
        val jdktokotlinresult = Mat(CppBindObject(result, true))
        return jdktokotlinresult
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as DocExtractor
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jImage(id: Long): Long
    private external fun jSetimage(id: Long, value: Long, valueObj: Any?): Unit
    private external fun jWarp(id: Long): Long
    private external fun jDrawpoints(id: Long, R: Int, G: Int, B: Int, vararg extraObjs: Any?): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

fun saveImage(filename: String, img: Mat): Boolean {
    val kotlintojdkimg = img.cppbindObjId
    val result = jSaveimage(filename, kotlintojdkimg, img)
    
    return result
}

private external fun jSaveimage(filename: String, img: Long, vararg extraObjs: Any?): Boolean

private external fun jGettypebyid(id: Long): String
