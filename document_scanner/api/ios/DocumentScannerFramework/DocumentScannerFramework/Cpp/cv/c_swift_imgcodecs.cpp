/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 11/16/2022-12:36.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "document_scanner/api/ios/DocumentScannerFramework/DocumentScannerFramework/Cpp/cv/c_swift_imgcodecs.h"
#include "DocumentScannerFramework/cppbind_wrapper_helper.hpp"
#include <opencv2/opencv.hpp>


extern const char* CPPBIND_CV_MAT;
extern const char* CPPBIND_STD_STDEXCEPTION;

CppBindCObject _func_Cv_imread_1(char* _Nonnull filename, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cv;
    auto ctocxxfilename = std::string(filename);
    free(filename);
    try {
        decltype(auto) result = cv::imread(ctocxxfilename);
        
        char* type_result = strdup(CPPBIND_CV_MAT);
        auto value_ptr_result = new cv::Mat(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_Cv_imread(char* _Nonnull filename, int flags, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cv;
    auto ctocxxfilename = std::string(filename);
    free(filename);
    
    try {
        decltype(auto) result = cv::imread(ctocxxfilename, flags);
        
        char* type_result = strdup(CPPBIND_CV_MAT);
        auto value_ptr_result = new cv::Mat(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

