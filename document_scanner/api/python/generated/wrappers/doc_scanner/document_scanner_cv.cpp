/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/13/2022-10:11.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "document_scanner/document_scanner_lib/document_scanner_cv.cpp"

namespace py = pybind11;

void bindDocScannerDocumentScannerCv(py::module& m) {
    {
        py::class_<DocCornerPointsExtractor> docCornerPointsExtractor(m, "DocCornerPointsExtractor");
        
        docCornerPointsExtractor.def(py::init<>());

        docCornerPointsExtractor.def(py::init<cv::Mat>(), py::arg("image"));

        docCornerPointsExtractor.def_property("image", py::cpp_function(&DocCornerPointsExtractor::image, py::return_value_policy::reference_internal), &DocCornerPointsExtractor::setImage);
        docCornerPointsExtractor.def("compute_corner_points", &DocCornerPointsExtractor::computeCornerPoints);

        docCornerPointsExtractor.def_property_readonly("points", &DocCornerPointsExtractor::points, py::return_value_policy::reference_internal);
        docCornerPointsExtractor.def("__repr__", [](const DocCornerPointsExtractor& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "DocCornerPointsExtractor";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        py::class_<DocExtractor> docExtractor(m, "DocExtractor");
        
        docExtractor.def(py::init<const cv::Mat &, std::vector<cv::Point>, float, float, int>(), py::arg("image"), py::arg("doc_corner_points"), py::arg("w") = 420, py::arg("h") = 596, py::arg("margin") = 5);

        docExtractor.def_property("image", py::cpp_function(&DocExtractor::image, py::return_value_policy::reference_internal), &DocExtractor::setImage);
        docExtractor.def("warp", &DocExtractor::warp, py::return_value_policy::automatic);
        docExtractor.def("draw_points", &DocExtractor::drawPoints, py::arg("r"), py::arg("g"), py::arg("b"), py::return_value_policy::automatic);
        docExtractor.def("__repr__", [](const DocExtractor& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "DocExtractor";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        m.def("save_image", &::saveImage, py::arg("filename"), py::arg("img"), py::return_value_policy::automatic);
    }
} /* bindDocScannerDocumentScannerCv */
